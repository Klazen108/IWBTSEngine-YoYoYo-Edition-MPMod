<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frozen = 0; //sets if player can move or not

jump = 8.5 * objWorld.grav; //set how fast the player jumps
jump2 = 7 * objWorld.grav; //sets how fast the player double jumps
gravity = 0.4 * objWorld.grav; //player gravity

djump = objWorld.player_djump; //allow the player to double jump as soon as he spawns
maxSpeed = 3; //max horizontal velocity
maxVspeed = 9; //max vertical velocity
image_speed = 0.2; //initial speed of animation
onPlatform = 0; //sets if player is currently standing on a platform

scrSetPlayerMask(); //set the player's hitbox

if (global.difficulty == 0 &amp;&amp; global.gameStarted)   //create bow
    instance_create(x,y,objBow);

if (global.autosave) //save the game if currently set to autosave
{
    scrSaveGame(1);
    global.autosave = 0;
}

i_xscale = 1;
grav = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objWorld.player_djump = djump;    //set global variable for when player respawns (this stores whether or not player can djump during a room transition)

with (objBow)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>p_jump = keyboard_check_pressed(global.jumpbutton);
r_jump = keyboard_check_released(global.jumpbutton);
k_jump = keyboard_check(global.jumpbutton);
p_shoot = keyboard_check_pressed(global.shotbutton);
d_left = keyboard_check/*_direct*/(global.leftbutton);
d_right = keyboard_check/*_direct*/(global.rightbutton);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check button presses
var L = d_left;
var R = d_right;

var h = R;
if (h == 0) {h = -L;}

if (frozen) {h = 0;}    //don't move if frozen

var slipBlockTouching = instance_place(x,y+(4*objWorld.grav),objSlipBlock);   //check if near a slip block

//vine checks
var notOnBlock = (place_free(x,y+(objWorld.grav)));
var onVineL = (place_meeting(x-1,y,objWalljumpL) &amp;&amp; notOnBlock);
var onVineR = (place_meeting(x+1,y,objWalljumpR) &amp;&amp; notOnBlock);

if (h != 0)  //player is moving
{
    if (!onVineR &amp;&amp; !onVineL)   //make sure not currently touching a vine
    {
        i_xscale = h;
    }
    if ((h == -1 &amp;&amp; !onVineR) || (h == 1 &amp;&amp; !onVineL))
    {
        if (slipBlockTouching == noone) //not touching a slip block, move immediately at full speed
            hspeed = maxSpeed * h;
        else    //touching a slip block, use acceleration
        {
            if ((h == 1 &amp;&amp; hspeed &lt; maxSpeed) || (h == -1 &amp;&amp; hspeed &gt; -maxSpeed))
                hspeed += (slipBlockTouching.slip) * h;
        }
        
        sprite_index = sprPlayerRunning;
        image_speed = 0.5;
    }
}
else    //player is not moving
{
    if (slipBlockTouching == noone) //not touching a slip block, stop immediately
        hspeed = 0;
    else    //touching a slip block, slow down
    {
        if (hspeed &gt; 0)
        {
            hspeed -= slipBlockTouching.slip;
            
            if (hspeed &lt;= 0)
                hspeed = 0;
        }
        else if (hspeed &lt; 0)
        {
            hspeed += slipBlockTouching.slip;
            
            if (hspeed &gt;= 0)
                hspeed = 0;
        }
    }
  
    sprite_index = sprPlayerIdle;
    image_speed = 0.2;
}


if (!onPlatform)    //check if standing on a platform
{
    if((vspeed * objWorld.grav) &lt; -0.05) {sprite_index = sprPlayerJump;}
    else if((vspeed * objWorld.grav) &gt; 0.05) {sprite_index = sprPlayerFall;}
}
else
{
    if (!place_meeting(x,y+(4*objWorld.grav),objPlatform)) {onPlatform = 0;}
}

var slideBlockTouching = instance_place(x,y+(objWorld.grav),objSlideBlock);   //check if on a slide block

if (slideBlockTouching != noone)    //on a slide block, start moving with it
    hspeed += slideBlockTouching.h;

if (abs(vspeed) &gt; maxVspeed) {vspeed = sign(vspeed)*maxVspeed;} //check if moving vertically faster than max speed

if (!frozen)    //check if frozen before doing anything
{
    if(p_shoot)
        scrPlayerShoot();
    if(p_jump)
        scrPlayerJump();
    if(r_jump)
        scrPlayerVJump();
    if(keyboard_check_pressed(global.suicidebutton))
        scrKillPlayer();
}

if (global.adAlign &amp;&amp; place_meeting(x,y+(objWorld.grav),objBlock) &amp;&amp; !frozen)  // A/D align
{
    if (keyboard_check_pressed(global.aAlignButton)) {hspeed -= 1;}
    if (keyboard_check_pressed(global.dAlignButton)) {hspeed += 1;}
}

//walljumps

if (onVineL || onVineR)
{
    if (onVineR)
        i_xscale = -1;
    else
        i_xscale = 1;
    
    vspeed = 2 * objWorld.grav;
    sprite_index = sprPlayerSliding;
    image_speed = 1/2;
    
    //pressed away from the vine
    if (onVineL &amp;&amp; d_right) || (onVineR &amp;&amp; d_left)
    {
        if (k_jump)  //jumping off vine
        {
            if (onVineR)
                hspeed = -15;
            else
                hspeed = 15;
            
            vspeed = -9 * objWorld.grav;
            audio_play_sound(sndWallJump,0,0);
            sprite_index = sprPlayerJump;
        }
        else    //moving off vine
        {
            if (onVineR)
                hspeed = -3;
            else
                hspeed = 3;
            
            sprite_index = sprPlayerFall;
        }
    }
}


if (scrIsMultiplayerMode()) { if (htme_isLocal()) objWorld.player_xscale = i_xscale; } //multiplayer
else objWorld.player_xscale = i_xscale; //singleplayer

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayerKiller">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrKillPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlatform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (objWorld.grav == 1)   //normal
{
    if (y-vspeed/2 &lt;= other.y)
    {
        if (other.vspeed &gt;= 0)
        {
            y = other.y-9;
            vspeed = other.vspeed;
        }
        
        onPlatform = 1;
        djump = true;
    }
}
else    //flipped
{
    if (y-vspeed/2 &gt;= other.y+other.sprite_height-1)
    {
        if (other.yspeed &lt;= 0)
        {
            y = other.y+other.sprite_height+8;
            vspeed = other.yspeed;
        }
        
        onPlatform = 1;
        djump = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!place_free(x+hspeed,y))
{
    if (objWorld.grav == 1)   //normal
    {
        if(hspeed &lt;= 0){move_contact_solid(180,abs(hspeed));}
        if(hspeed &gt; 0){move_contact_solid(0,abs(hspeed));}
    }
    else    //flipped
    {
        if(hspeed &lt; 0){move_contact_solid(180,abs(hspeed));}
        if(hspeed &gt;= 0){move_contact_solid(0,abs(hspeed));}
    }
    hspeed = 0;
}
 
if(!place_free(x,y+vspeed))
{
    if (objWorld.grav == 1)   //normal
    {
        if(vspeed &lt;= 0){move_contact_solid(90,abs(vspeed));}
        if(vspeed &gt; 0){move_contact_solid(270,abs(vspeed));djump=1;}
    }
    else    //flipped
    {
        if(vspeed &lt;= 0){move_contact_solid(90,abs(vspeed));djump=1;}
        if(vspeed &gt; 0){move_contact_solid(270,abs(vspeed));}
    }
    vspeed = 0;
}

if (!place_free(x+hspeed,y+vspeed)) {hspeed = 0;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.edgeDeath &amp;&amp; (x &lt; 0 || x &gt; room_width || y &lt; 0 || y &gt; room_height))  //check if player has left the room
    scrKillPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>i_xscale = objWorld.player_xscale; //set up the xscale for the draw event (overriden in MP player)
grav = objWorld.grav;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the player

var drawX = x;
var drawY = y;

if (grav == -1)      //need to draw the player a pixel off in the y-axis when flipped for some reason
    drawY += 1;

draw_sprite_ext(sprite_index,image_index,drawX,drawY,image_xscale*i_xscale,image_yscale*grav,image_angle,image_blend,image_alpha);

//draw the hitbox
if (global.showHitbox)
    draw_sprite_ext(mask_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha*0.8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
